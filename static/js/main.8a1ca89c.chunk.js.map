{"version":3,"sources":["App.tsx","helpers/gl-wrapper.ts","reportWebVitals.ts","index.tsx"],"names":["App","canvas","useRef","useEffect","current","gl","getContext","Error","defaultClearColor","clearColor","clear","COLOR_BUFFER_BIT","loadShader","type","source","shader","createShader","glCreateShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","e","deleteShader","shaderProgram","vsSource","fsSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","glCreateProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","programInfo","attribLocations","vertexPosition","getAttribLocation","vertexColor","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","initBuffers","positionAndColorsBuffer","webGLBuffer","createBuffer","glCreateBuffer","bindBuffer","ARRAY_BUFFER","data","Float32Array","bufferData","STATIC_DRAW","positionAndColors","positionAndColorsBytesPerElement","BYTES_PER_ELEMENT","triangleRotation","then","requestAnimationFrame","render","now","deltaTime","info","buffers","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","aspect","clientWidth","clientHeight","mat4","create","perspective","translate","rotate","stride","vertexAttribPointer","FLOAT","enableVertexAttribArray","useProgram","uniformMatrix4fv","drawArrays","TRIANGLE_STRIP","drawScene","className","ref","id","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.8a1ca89c.chunk.js","sourcesContent":["import { mat4 } from \"gl-matrix\"\nimport { useEffect, useRef } from \"react\"\nimport \"./App.css\"\nimport {\n  glCreateBuffer,\n  glCreateProgram,\n  glCreateShader,\n} from \"./helpers/gl-wrapper\"\n\ntype MyBuffers = {\n  positionAndColors: WebGLBuffer\n  positionAndColorsBytesPerElement: number\n}\n\nfunction App() {\n  const canvas = useRef<HTMLCanvasElement>(null)\n  useEffect(() => {\n    if (!canvas.current) return\n\n    const gl = canvas.current?.getContext(\"webgl2\")\n    if (!gl) {\n      throw new Error(\n        \"Unable to initialize WebGL. Your browser or machine may not support it.\"\n      )\n    }\n\n    const defaultClearColor: [number, number, number, number] = [\n      0.8,\n      0.8,\n      0.8,\n      1.0,\n    ]\n    gl.clearColor(...defaultClearColor)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    const vsSource = `\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec4 vColor;\n\n    void main() {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vColor = aVertexColor;\n    }\n  `\n    const fsSource = `\n    varying lowp vec4 vColor;\n\n    void main() {\n      gl_FragColor = vColor;\n    }\n  `\n\n    const loadShader = (\n      gl: WebGL2RenderingContext,\n      type: number,\n      source: string\n    ) => {\n      const shader = glCreateShader(gl, type)\n\n      gl.shaderSource(shader, source)\n      gl.compileShader(shader)\n\n      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        try {\n          throw new Error(\n            `An error occurred compiling the shaders: ${gl.getShaderInfoLog(\n              shader\n            )}`\n          )\n        } catch (e) {\n          gl.deleteShader(shader)\n          throw new Error(e)\n        }\n      }\n\n      return shader\n    }\n\n    const initShaderProgram = (\n      gl: WebGL2RenderingContext,\n      vsSource: string,\n      fsSource: string\n    ) => {\n      const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n      const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\n\n      const shaderProgram = glCreateProgram(gl)\n\n      gl.attachShader(shaderProgram, vertexShader)\n      gl.attachShader(shaderProgram, fragmentShader)\n      gl.linkProgram(shaderProgram)\n\n      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        throw new Error(\n          `Unable to initialize the shader program: ${gl.getProgramInfoLog(\n            shaderProgram\n          )}`\n        )\n      }\n\n      return shaderProgram\n    }\n\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource)\n\n    const programInfo = {\n      program: shaderProgram,\n      attribLocations: {\n        vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\n        vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\"),\n      },\n      uniformLocations: {\n        projectionMatrix: gl.getUniformLocation(\n          shaderProgram,\n          \"uProjectionMatrix\"\n        ),\n        modelViewMatrix: gl.getUniformLocation(\n          shaderProgram,\n          \"uModelViewMatrix\"\n        ),\n      },\n    }\n\n    const initBuffers = (gl: WebGL2RenderingContext): MyBuffers => {\n      const positionAndColorsBuffer = glCreateBuffer(gl)\n      gl.bindBuffer(gl.ARRAY_BUFFER, positionAndColorsBuffer)\n\n      const positionsAndColors = [\n        // v0\n        0.0,\n        1.25,\n        // Red\n        1.0,\n        0.0,\n        0.0,\n        1.0,\n        // v1\n        1.0,\n        -0.55,\n        // Green\n        0.0,\n        1.0,\n        0.0,\n        1.0,\n        // v2\n        -1.0,\n        -0.55,\n        // Blue\n        0.0,\n        0.0,\n        1.0,\n        1.0,\n      ]\n\n      const data = new Float32Array(positionsAndColors)\n\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n\n      const positionAndColorsBytesPerElement = data.BYTES_PER_ELEMENT\n\n      return {\n        positionAndColors: positionAndColorsBuffer,\n        positionAndColorsBytesPerElement,\n      }\n    }\n\n    let triangleRotation = 0.0\n    const drawScene = (\n      gl: WebGL2RenderingContext,\n      info: typeof programInfo,\n      buffers: MyBuffers,\n      deltaTime: number\n    ) => {\n      gl.clearColor(...defaultClearColor)\n      gl.clearDepth(1.0)\n      gl.enable(gl.DEPTH_TEST)\n      gl.depthFunc(gl.LEQUAL)\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n      const fieldOfView = (45 * Math.PI) / 180\n      const aspect =\n        (gl.canvas as HTMLCanvasElement).clientWidth /\n        (gl.canvas as HTMLCanvasElement).clientHeight\n\n      const zNear = 0.1\n      const zFar = 100.0\n      const projectionMatrix = mat4.create()\n\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar)\n\n      const modelViewMatrix = mat4.create()\n      mat4.translate(modelViewMatrix, modelViewMatrix, [0.0, 0.0, -6.0])\n      mat4.rotate(modelViewMatrix, modelViewMatrix, triangleRotation, [0, 0, 1])\n\n      {\n        const stride = 6 * buffers.positionAndColorsBytesPerElement\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.positionAndColors)\n        gl.vertexAttribPointer(\n          info.attribLocations.vertexPosition,\n          2,\n          gl.FLOAT,\n          false,\n          stride,\n          0\n        )\n        gl.enableVertexAttribArray(info.attribLocations.vertexPosition)\n\n        gl.vertexAttribPointer(\n          info.attribLocations.vertexColor,\n          4,\n          gl.FLOAT,\n          false,\n          stride,\n          2 * buffers.positionAndColorsBytesPerElement\n        )\n        gl.enableVertexAttribArray(info.attribLocations.vertexColor)\n      }\n\n      gl.useProgram(info.program)\n\n      gl.uniformMatrix4fv(\n        info.uniformLocations.projectionMatrix,\n        false,\n        projectionMatrix\n      )\n      gl.uniformMatrix4fv(\n        info.uniformLocations.modelViewMatrix,\n        false,\n        modelViewMatrix\n      )\n\n      const offset = 0\n      const vertexCount = 3\n      gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount)\n      triangleRotation -= deltaTime\n    }\n\n    let then = 0\n    const render = (now: DOMHighResTimeStamp) => {\n      now *= 0.001\n      const deltaTime = now - then\n      then = now\n\n      drawScene(gl, programInfo, initBuffers(gl), deltaTime)\n\n      requestAnimationFrame(render)\n    }\n\n    requestAnimationFrame(render)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <canvas ref={canvas} id=\"glCanvas\" width=\"640\" height=\"480\"></canvas>\n    </div>\n  )\n}\n\nexport default App\n","export function glCreateBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\r\n  const webGLBuffer = gl.createBuffer()\r\n  if (!webGLBuffer) {\r\n    throw new Error(\"Failed to create buffer\")\r\n  }\r\n  return webGLBuffer\r\n}\r\n\r\nexport function glCreateShader(\r\n  gl: WebGL2RenderingContext,\r\n  type: number\r\n): WebGLShader {\r\n  const shader = gl.createShader(type)\r\n  if (!shader) {\r\n    throw new Error(\"Failed to create shader.\")\r\n  }\r\n  return shader\r\n}\r\n\r\nexport function glCreateProgram(gl: WebGL2RenderingContext): WebGLProgram {\r\n  const program = gl.createProgram()\r\n  if (!program) {\r\n    throw new Error(\"Failed to create program.\")\r\n  }\r\n  return program\r\n}\r\n","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}