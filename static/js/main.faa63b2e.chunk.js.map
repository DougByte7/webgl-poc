{"version":3,"sources":["helpers/gl-wrapper.ts","scene-objects/cube.ts","textures/uv-reference.png","components/webgl-canvas/webgl-canvas-container.tsx","components/error-boundary/error-boundary-view.tsx","components/error-boundary/error-boundary-container.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["glCreateBuffer","gl","webGLBuffer","createBuffer","Error","loadShader","type","source","shader","createShader","glCreateShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaderInfoLog","getShaderInfoLog","deleteShader","cubePositions","cubeIndices","cubeTextureCoordinates","WebGLCanvasContainer","canvas","useRef","useEffect","current","getContext","defaultClearColor","clearColor","clear","COLOR_BUFFER_BIT","shaderProgram","vsSource","fsSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","glCreateProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initShaderProgram","programInfo","attribLocations","vertexPosition","getAttribLocation","vertexColor","textureCoord","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","uSampler","cubeRotation","texture","url","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","isPowerOf2","value","image","Image","onload","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","src","loadTexture","uvTextureReference","then","requestAnimationFrame","render","now","deltaTime","info","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","aspect","clientWidth","clientHeight","mat4","create","perspective","translate","rotate","sceneObjectPositionBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vertexAttribPointer","FLOAT","enableVertexAttribArray","sceneObjectTextureCoordBuffer","sceneObjectIndicesBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","useProgram","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","drawElements","TRIANGLES","UNSIGNED_SHORT","drawScene","ref","id","ErrorBoundaryView","props","className","error","message","errorInfo","componentStack","title","onClick","window","location","href","ErrorBoundary","state","hasError","this","setState","children","_error","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.faa63b2e.chunk.js","sourcesContent":["export function glCreateBuffer(gl: WebGL2RenderingContext): WebGLBuffer {\r\n  const webGLBuffer = gl.createBuffer()\r\n  if (!webGLBuffer) {\r\n    throw new Error(\"Failed to create buffer\")\r\n  }\r\n  return webGLBuffer\r\n}\r\n\r\nexport function glCreateShader(\r\n  gl: WebGL2RenderingContext,\r\n  type: number\r\n): WebGLShader {\r\n  const shader = gl.createShader(type)\r\n  if (!shader) {\r\n    throw new Error(\"Failed to create shader.\")\r\n  }\r\n  return shader\r\n}\r\n\r\nexport function glCreateProgram(gl: WebGL2RenderingContext): WebGLProgram {\r\n  const program = gl.createProgram()\r\n  if (!program) {\r\n    throw new Error(\"Failed to create program.\")\r\n  }\r\n  return program\r\n}\r\n\r\nexport const loadShader = (\r\n  gl: WebGL2RenderingContext,\r\n  type: number,\r\n  source: string\r\n): WebGLShader => {\r\n  const shader = glCreateShader(gl, type)\r\n\r\n  gl.shaderSource(shader, source)\r\n  gl.compileShader(shader)\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const shaderInfoLog = gl.getShaderInfoLog(shader)\r\n    gl.deleteShader(shader)\r\n    throw new Error(`An error occurred compiling the shaders: ${shaderInfoLog}`)\r\n  }\r\n\r\n  return shader\r\n}\r\n\r\nexport const loadTexture = (\r\n  gl: WebGL2RenderingContext,\r\n  url: string\r\n): WebGLTexture => {\r\n  const texture = gl.createTexture()\r\n  if (!texture) {\r\n    throw new Error(\"Failed to create texture.\")\r\n  }\r\n  gl.bindTexture(gl.TEXTURE_2D, texture)\r\n\r\n  const level = 0\r\n  const internalFormat = gl.RGBA\r\n  const width = 1\r\n  const height = 1\r\n  const border = 0\r\n  const srcFormat = gl.RGBA\r\n  const srcType = gl.UNSIGNED_BYTE\r\n  const pixel = new Uint8Array([255, 20, 147, 255])\r\n  gl.texImage2D(\r\n    gl.TEXTURE_2D,\r\n    level,\r\n    internalFormat,\r\n    width,\r\n    height,\r\n    border,\r\n    srcFormat,\r\n    srcType,\r\n    pixel\r\n  )\r\n\r\n  const isPowerOf2 = (value: number) => (value & (value - 1)) === 0\r\n  const image = new Image()\r\n  image.onload = () => {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n      gl.TEXTURE_2D,\r\n      level,\r\n      internalFormat,\r\n      srcFormat,\r\n      srcType,\r\n      image\r\n    )\r\n\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n      gl.generateMipmap(gl.TEXTURE_2D)\r\n    } else {\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\r\n    }\r\n  }\r\n  image.src = url\r\n\r\n  return texture\r\n}\r\n","export const cubePositions = [\r\n // Front face\r\n -1.0, -1.0,  1.0,\r\n  1.0, -1.0,  1.0,\r\n  1.0,  1.0,  1.0,\r\n -1.0,  1.0,  1.0,\r\n\r\n // Back face\r\n -1.0, -1.0, -1.0,\r\n -1.0,  1.0, -1.0,\r\n  1.0,  1.0, -1.0,\r\n  1.0, -1.0, -1.0,\r\n\r\n // Top face\r\n -1.0,  1.0, -1.0,\r\n -1.0,  1.0,  1.0,\r\n  1.0,  1.0,  1.0,\r\n  1.0,  1.0, -1.0,\r\n\r\n // Bottom face\r\n -1.0, -1.0, -1.0,\r\n  1.0, -1.0, -1.0,\r\n  1.0, -1.0,  1.0,\r\n -1.0, -1.0,  1.0,\r\n\r\n // Right face\r\n  1.0, -1.0, -1.0,\r\n  1.0,  1.0, -1.0,\r\n  1.0,  1.0,  1.0,\r\n  1.0, -1.0,  1.0,\r\n\r\n // Left face\r\n -1.0, -1.0, -1.0,\r\n -1.0, -1.0,  1.0,\r\n -1.0,  1.0,  1.0,\r\n -1.0,  1.0, -1.0,\r\n]\r\n\r\nexport const cubeFaceColors = [\r\n    [1.0,  1.0,  1.0,  1.0],    // Front face: white\r\n    [1.0,  0.0,  0.0,  1.0],    // Back face: red\r\n    [0.0,  1.0,  0.0,  1.0],    // Top face: green\r\n    [0.0,  0.0,  1.0,  1.0],    // Bottom face: blue\r\n    [1.0,  1.0,  0.0,  1.0],    // Right face: yellow\r\n    [1.0,  0.0,  1.0,  1.0],    // Left face: purple\r\n  ]\r\n\r\nexport const cubeIndices = [\r\n    0,  1,  2,      0,  2,  3,    // front\r\n    4,  5,  6,      4,  6,  7,    // back\r\n    8,  9,  10,     8,  10, 11,   // top\r\n    12, 13, 14,     12, 14, 15,   // bottom\r\n    16, 17, 18,     16, 18, 19,   // right\r\n    20, 21, 22,     20, 22, 23,   // left\r\n  ]\r\n\r\nexport const cubeTextureCoordinates = [\r\n    // Front\r\n    0.0,  0.0,\r\n    1.0,  0.0,\r\n    1.0,  1.0,\r\n    0.0,  1.0,\r\n    // Back\r\n    0.0,  0.0,\r\n    1.0,  0.0,\r\n    1.0,  1.0,\r\n    0.0,  1.0,\r\n    // Top\r\n    0.0,  0.0,\r\n    1.0,  0.0,\r\n    1.0,  1.0,\r\n    0.0,  1.0,\r\n    // Bottom\r\n    0.0,  0.0,\r\n    1.0,  0.0,\r\n    1.0,  1.0,\r\n    0.0,  1.0,\r\n    // Right\r\n    0.0,  0.0,\r\n    1.0,  0.0,\r\n    1.0,  1.0,\r\n    0.0,  1.0,\r\n    // Left\r\n    0.0,  0.0,\r\n    1.0,  0.0,\r\n    1.0,  1.0,\r\n    0.0,  1.0,\r\n  ]\r\n","export default __webpack_public_path__ + \"static/media/uv-reference.dba5e4c6.png\";","import { mat4 } from \"gl-matrix\"\r\nimport { FunctionComponent, useEffect, useRef } from \"react\"\r\nimport {\r\n  glCreateBuffer,\r\n  glCreateProgram,\r\n  loadShader,\r\n  loadTexture,\r\n} from \"@/helpers/gl-wrapper\"\r\nimport {\r\n  //cubeFaceColors,\r\n  cubeIndices,\r\n  cubePositions,\r\n  cubeTextureCoordinates,\r\n} from \"@/scene-objects/cube\"\r\nimport uvTextureReference from \"@/textures/uv-reference.png\"\r\n\r\nconst WebGLCanvasContainer: FunctionComponent = () => {\r\n  const canvas = useRef<HTMLCanvasElement>(null)\r\n\r\n  useEffect(() => {\r\n    if (!canvas.current) return\r\n\r\n    const gl = canvas.current?.getContext(\"webgl2\")\r\n    if (!gl) {\r\n      throw new Error(\r\n        \"Unable to initialize WebGL. Your browser or machine may not support it.\"\r\n      )\r\n    }\r\n\r\n    const defaultClearColor: [number, number, number, number] = [\r\n      0.8,\r\n      0.8,\r\n      0.8,\r\n      1.0,\r\n    ]\r\n    gl.clearColor(...defaultClearColor)\r\n    gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n    const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    // attribute vec4 aVertexColor;\r\n    attribute vec2 aTextureCoord;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    // varying lowp vec4 vColor;\r\n    varying highp vec2 vTextureCoord;\r\n\r\n    void main() {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      // vColor = aVertexColor;\r\n      vTextureCoord = aTextureCoord;\r\n    }\r\n  `\r\n    const fsSource = `\r\n    // varying lowp vec4 vColor;\r\n    varying highp vec2 vTextureCoord;\r\n\r\n    uniform sampler2D uSampler;\r\n\r\n    void main() {\r\n      // gl_FragColor = vColor;\r\n      gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n    }\r\n  `\r\n\r\n    const initShaderProgram = (\r\n      gl: WebGL2RenderingContext,\r\n      vsSource: string,\r\n      fsSource: string\r\n    ) => {\r\n      const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\r\n      const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\r\n\r\n      const shaderProgram = glCreateProgram(gl)\r\n\r\n      gl.attachShader(shaderProgram, vertexShader)\r\n      gl.attachShader(shaderProgram, fragmentShader)\r\n      gl.linkProgram(shaderProgram)\r\n\r\n      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        throw new Error(\r\n          `Unable to initialize the shader program: ${gl.getProgramInfoLog(\r\n            shaderProgram\r\n          )}`\r\n        )\r\n      }\r\n\r\n      return shaderProgram\r\n    }\r\n\r\n    const shaderProgram = initShaderProgram(gl, vsSource, fsSource)\r\n\r\n    const programInfo = {\r\n      program: shaderProgram,\r\n      attribLocations: {\r\n        vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\r\n        vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\"),\r\n        textureCoord: gl.getAttribLocation(shaderProgram, \"aTextureCoord\"),\r\n      },\r\n      uniformLocations: {\r\n        projectionMatrix: gl.getUniformLocation(\r\n          shaderProgram,\r\n          \"uProjectionMatrix\"\r\n        ),\r\n        modelViewMatrix: gl.getUniformLocation(\r\n          shaderProgram,\r\n          \"uModelViewMatrix\"\r\n        ),\r\n        uSampler: gl.getUniformLocation(shaderProgram, \"uSampler\"),\r\n      },\r\n    }\r\n\r\n    let cubeRotation = 0.0\r\n    const texture = loadTexture(gl, uvTextureReference)\r\n\r\n    const drawScene = (\r\n      gl: WebGL2RenderingContext,\r\n      info: typeof programInfo,\r\n      deltaTime: number\r\n    ) => {\r\n      gl.clearColor(...defaultClearColor)\r\n      gl.clearDepth(1.0)\r\n      gl.enable(gl.DEPTH_TEST)\r\n      gl.depthFunc(gl.LEQUAL)\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n      const fieldOfView = (45 * Math.PI) / 180\r\n      const aspect =\r\n        (gl.canvas as HTMLCanvasElement).clientWidth /\r\n        (gl.canvas as HTMLCanvasElement).clientHeight\r\n\r\n      const zNear = 0.1\r\n      const zFar = 100.0\r\n      const projectionMatrix = mat4.create()\r\n\r\n      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar)\r\n\r\n      const modelViewMatrix = mat4.create()\r\n      mat4.translate(modelViewMatrix, modelViewMatrix, [0.0, 0.0, -6.0])\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, cubeRotation, [0, 0, 1])\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, cubeRotation * 0.2, [\r\n        0,\r\n        1,\r\n        0,\r\n      ])\r\n      mat4.rotate(modelViewMatrix, modelViewMatrix, cubeRotation * 0.5, [\r\n        1,\r\n        0,\r\n        0,\r\n      ])\r\n\r\n      const sceneObjectPositionBuffer = glCreateBuffer(gl)\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, sceneObjectPositionBuffer)\r\n      gl.bufferData(\r\n        gl.ARRAY_BUFFER,\r\n        new Float32Array(cubePositions),\r\n        gl.STATIC_DRAW\r\n      )\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, sceneObjectPositionBuffer)\r\n      gl.vertexAttribPointer(\r\n        info.attribLocations.vertexPosition,\r\n        3,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      )\r\n      gl.enableVertexAttribArray(info.attribLocations.vertexPosition)\r\n\r\n      /*\r\n      let colors = cubeFaceColors\r\n        .map<number[][]>(\r\n          // Repeat each color four times for the four vertices of the face\r\n          (color) => Array.from({ length: 4 }, (_) => color)\r\n        )\r\n        .flat(2)\r\n\r\n      const sceneObjectColorBuffer = glCreateBuffer(gl)\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, sceneObjectColorBuffer)\r\n\r\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n      gl.vertexAttribPointer(\r\n        info.attribLocations.vertexColor,\r\n        4,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      )\r\n      gl.enableVertexAttribArray(info.attribLocations.vertexColor)\r\n      */\r\n\r\n      const sceneObjectTextureCoordBuffer = glCreateBuffer(gl)\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, sceneObjectTextureCoordBuffer)\r\n      gl.bufferData(\r\n        gl.ARRAY_BUFFER,\r\n        new Float32Array(cubeTextureCoordinates),\r\n        gl.STATIC_DRAW\r\n      )\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, sceneObjectTextureCoordBuffer)\r\n      gl.vertexAttribPointer(\r\n        info.attribLocations.textureCoord,\r\n        2,\r\n        gl.FLOAT,\r\n        false,\r\n        0,\r\n        0\r\n      )\r\n      gl.enableVertexAttribArray(info.attribLocations.textureCoord)\r\n\r\n      const sceneObjectIndicesBuffer = glCreateBuffer(gl)\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, sceneObjectIndicesBuffer)\r\n      gl.bufferData(\r\n        gl.ELEMENT_ARRAY_BUFFER,\r\n        new Uint16Array(cubeIndices),\r\n        gl.STATIC_DRAW\r\n      )\r\n\r\n      gl.useProgram(info.program)\r\n\r\n      gl.uniformMatrix4fv(\r\n        info.uniformLocations.projectionMatrix,\r\n        false,\r\n        projectionMatrix\r\n      )\r\n      gl.uniformMatrix4fv(\r\n        info.uniformLocations.modelViewMatrix,\r\n        false,\r\n        modelViewMatrix\r\n      )\r\n\r\n      gl.activeTexture(gl.TEXTURE0)\r\n      gl.bindTexture(gl.TEXTURE_2D, texture)\r\n      gl.uniform1i(programInfo.uniformLocations.uSampler, 0)\r\n\r\n      const offset = 0\r\n      const vertexCount = 36\r\n      gl.drawElements(gl.TRIANGLES, vertexCount, gl.UNSIGNED_SHORT, offset)\r\n      cubeRotation -= deltaTime\r\n    }\r\n\r\n    let then = 0\r\n    const render = (now: DOMHighResTimeStamp) => {\r\n      now *= 0.001\r\n      const deltaTime = now - then\r\n      then = now\r\n\r\n      drawScene(gl, programInfo, deltaTime)\r\n\r\n      requestAnimationFrame(render)\r\n    }\r\n\r\n    requestAnimationFrame(render)\r\n  }, [])\r\n\r\n  return <canvas ref={canvas} id=\"glCanvas\" width=\"640\" height=\"480\"></canvas>\r\n}\r\n\r\nexport default WebGLCanvasContainer\r\n","import \"./error-boundary.scss\"\r\nimport { ErrorInfo, FunctionComponent } from \"react\"\r\n\r\ninterface ErrorBoundaryViewProps {\r\n  error: Error | null\r\n  errorInfo: ErrorInfo | null\r\n}\r\n\r\nconst ErrorBoundaryView: FunctionComponent<ErrorBoundaryViewProps> = (\r\n  props\r\n) => {\r\n  const handleGoBack = () => {\r\n    // eslint-disable-next-line no-self-assign\r\n    window.location.href = window.location.href\r\n  }\r\n  return (\r\n    <section className=\"error-boundary\">\r\n      <h1 className=\"error-boundary__title\">Something wrong is not right!</h1>\r\n      <h2 className=\"error-boundary__message\">{props.error?.message}</h2>\r\n      <p className=\"error-boundary__stack\">{props.errorInfo?.componentStack}</p>\r\n      <button className=\"error-boundary__btn-go-back\" title='Go back' onClick={handleGoBack}>\r\n        I want to be monke! 🐵\r\n      </button>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default ErrorBoundaryView\r\n","import React, { ErrorInfo } from \"react\"\r\nimport ErrorBoundaryView from \"./error-boundary-view\"\r\n\r\ninterface ErrorBoundaryProps {\r\n  children: React.ReactNode\r\n}\r\n\r\ninterface ErrorBoundaryState {\r\n  hasError: boolean\r\n  error: Error | null\r\n  errorInfo: ErrorInfo | null\r\n}\r\n\r\nclass ErrorBoundary extends React.Component<\r\n  ErrorBoundaryProps,\r\n  ErrorBoundaryState\r\n> {\r\n  constructor(props: ErrorBoundaryProps) {\r\n    super(props)\r\n    this.state = { hasError: false, error: null, errorInfo: null }\r\n  }\r\n\r\n  static getDerivedStateFromError(_error: Error) {\r\n    return { hasError: true }\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    this.setState({ ...this.state, error, errorInfo })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        <ErrorBoundaryView\r\n          error={this.state.error}\r\n          errorInfo={this.state.errorInfo}\r\n        />\r\n      )\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import \"./App.scss\"\nimport { WebGLCanvasComponent } from \"./components/webgl-canvas\"\nimport { ErrorBoundaryComponent } from \"./components/error-boundary\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ErrorBoundaryComponent>\n        <WebGLCanvasComponent />\n      </ErrorBoundaryComponent>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}